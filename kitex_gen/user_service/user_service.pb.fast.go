// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user_service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *PingRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PingRequest[number], err)
}

func (x *PingRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Service, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PingResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PingResponse[number], err)
}

func (x *PingResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *PingResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Data, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PingRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PingRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Service == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetService())
	return offset
}

func (x *PingResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PingResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *PingResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Data == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetData())
	return offset
}

func (x *PingRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PingRequest) sizeField1() (n int) {
	if x.Service == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetService())
	return n
}

func (x *PingResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PingResponse) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

func (x *PingResponse) sizeField2() (n int) {
	if x.Data == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetData())
	return n
}

var fieldIDToName_PingRequest = map[int32]string{
	1: "Service",
}

var fieldIDToName_PingResponse = map[int32]string{
	1: "Code",
	2: "Data",
}
